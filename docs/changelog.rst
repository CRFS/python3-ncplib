Changelog
=========

.. currentmodule:: ncplib


3.0.0 - Master
--------------

- **Breaking:** Dropped support for Python 3.4.


2.3.3 - 27/03/2017
------------------

- Only applying wait_for compatibility shim to Python 3.4.2 and below.


2.3.2 - 15/03/2017
------------------

- Forcing cancellation of timed out connection in ``run_client`` in Python 3.4.2.
- Added `examples`_.


2.3.1 - 02/03/2017
------------------

- Using ``remote_hostname`` in connect errors messages generated by ``run_client``.
- Fixed issues with mixing coroutines and async defs.
- Fixed issues with logging connection errors in ``run_client``.


2.3.0 - 02/03/2017
------------------

- Added :attr:`Field.connection`.
- Added ``app``.
- Added :class`NCPError`, :class:`ConnectionError` and :class`ConnectionClosed` exceptions.
- Added ``run_client``.
- :func:`connect`, :meth:`Connection.recv`, :meth:`Connection.recv_field`, :meth:`Response.recv` and
  :meth:`Response.recv_field` no longer raise :class:`EOFError` or :class:`OSError`, but a subclass of
  :class:`NCPError`.
- Micro-optimizations, roughly doubling the performance of encode/decode.
- Connection open and close log messages promoted from ``DEBUG`` to ``INFO`` level.


2.2.1 - 27/02/2017
------------------

- Fixed bug with Node authentication due to premature sending of LINK packets.
- Fixed edge-case bug in connection closing.


2.2.0 - 27/02/2017
------------------

- Added Python 3.4 support.
- Added :meth:`Connection.is_closing`.
- Added :attr:`Connection.remote_hostname`.
- Added ``auto_link`` parameter to :func:`connect`, :func:`start_server` and ``run_app``.
- Added ``remote_hostname`` parameter to :func:`connect`.
- Connection open and close log messages demoted from ``INFO`` to ``DEBUG`` level.


2.1.0 - 04/11/2016
------------------

- Client hostname used in :func:`connect` defaults to system hostname, instead of ``"python3-ncplib"``.
- Added ``hostname`` parameter to :func:`connect`, to override default client hostname.
- Removed multiplexing support for multiple :class:`Response` over a single connection. This must now be implemented in
  application code.
- :class:`Connection` logger no longer formats the host and port in log messages. This must now be done using the
  standard Python :class:`logging.Formatter`.


2.0.14 - 04/11/2016
-------------------

- Added support for parsing known embedded footer bug from Axis nodes.
- Fixed pending deprecation warning for legacy ``__aiter__`` protocol.


2.0.13 - 21/10/2016
-------------------

- Using ``transport.is_closing()`` to detect lost connection, making ncplib compatible with ``uvloop``.


2.0.12 - 21/10/2016
-------------------

- :meth:`Connection.recv_field` and :meth:`Response.recv_field` now raise an exception on network error to match the behavior of :meth:`Connection.recv` and :meth:`Response.recv`. Previously they returned ``None`` on network error, an undocumented and undesired behavior.


2.0.11 - 14/10/2016
-------------------

- Deprecated ``wait_closed()`` on :class:`Connection`. It's now a no-op, and :meth:`Connection.close()` is sufficient to close the connection.


2.0.10 - 14/10/2016
-------------------

- Fixed IPv6 handling in NCP server.


2.0.9 - 13/10/2016
------------------

- Handling more classes of shutdown errors.


2.0.8 - 13/10/2016
------------------

- Suppressing connection errors in NCP server.


2.0.7 - 13/10/2016
------------------

- Handling more classes of shutdown errors.


2.0.6 - 13/10/2016
------------------

- Handling more classes of client connection error gracefully.
- Handling shutdown of broken connections gracefully.


2.0.5 - 11/10/2016
------------------

- Gracefully closing client connections on authentication error.


2.0.4 - 05/09/2016
------------------

- Not validating packet format in incoming packets.


2.0.3 - 02/09/2016
------------------

- Not logging client errors and warnings, since raised exceptions/warnings will do this automatically.


2.0.2 - 01/09/2016
------------------

- Stripping trailing spaces from field names on decode, in addition to null bytes.


2.0.1 - 19/07/2016
------------------

- Added ``run_app`` function to :doc:`server`.


2.0.0 - 17/03/2016
------------------

This release requires a minimum Python version of 3.5. This allows :mod:`ncplib` to take advantage of new native support for coroutines in Python 3.5. It also provides a new :func:`start_server` function for creating a :doc:`server`.

A number of interfaces have been updated or removed in order to take better advantage of Python 3.5 async features, and to unify the interface between :doc:`client` and :doc:`server` connections. Please read the detailed release notes below for more information.

-   :doc:`server` support.
-   :class:`Connection` can be used as an *async context manager*.
-   :meth:`Connection.send` has a cleaner API, allowing params to be specified as keyword arguments.
-   :meth:`Connection.send` and :meth:`Connection.send_packet` return a :class:`Response` that can be used to access replies to the original messages.
-   :meth:`Connection.recv`, :meth:`Connection.recv_field`, :meth:`Response.recv` and :meth:`Response.recv_field` return a :class:`Field` instance, representing a :term:`NCP field`.
-   :class:`Connection` and :class:`Response` can be used as an *async iterator* of :class:`Field`.
-   :meth:`Field.send` allows direct replies to be sent to the incoming :term:`NCP field`.
-   **Breaking:** Python 3.5 is now the minimum supported Python version.
-   **Breaking:** :meth:`Connection.send()` API has changed to be single-field. Use :meth:`Connection.send_packet` to send a multi-field :term:`NCP packet`.
-   **Breaking:** ``Connection.execute()`` has been removed. Use ``Connection.send().recv()`` instead.


1.0.1 - 21/12/2015
------------------

- Automated build and release of package to private Anaconda Cloud channel.


1.0.0 - 07/12/2015
------------------

- First production release.


.. include:: /_include/links.rst
